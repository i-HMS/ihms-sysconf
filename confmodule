<?php
/**
 * Sysconf - Interactive configuration system for PHP applications
 * Copyright (C) 2012 by iHMS Team
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * @category    iHMS
 * @package     iHMS_Sysconf
 * @subpackage  Test
 * @copyright   2012 by iHMS Team
 * @author      Laurent Declercq <l.declercq@nuxwin.com>
 * @version     0.0.1
 * @link        https://github.com/i-HMS/sysconf Sysconf Home Site
 * @license     http://www.gnu.org/licenses/gpl-2.0.html GPL v2
 */

/** @see  */
require_once 'bootstrap.php';

/**
 * DESCRIPTION
 *
 * This is a PHP library to interface to the sysconf configuration management
 */
use iHMS\Sysconf\Client\ConfModule;

/**
 * Compares protocol versions with the confmodule. The version field of the ConfModule is sent to the client
 *
 * @param string $version Version to compare
 * @return array
 */
function version($version = null)
{
    return ConfModule::version($version);
}

/**
 * Sets the client_capb field to the confmodules's capabilities, and also sets the capb_backup field of the
 * ConfModules associated FrontEnd if the confmodule can backup. Sends the capb field of the associated FrontEnd
 * to the confmodule.
 *
 * @param string|array capabilitie(s)
 * @return array
 */
function capb($capabilities)
{
    return ConfModule::capb($capabilities);
}

/**
 * Tells syconf that youâ€™re done talking to it. Often sysconf  can detect termination of your program and this command
 * is not necessary.
 *
 * @return string
 */
function stop()
{
    return ConfModule::stop();
}

/**
 * Reset a question to its default value
 *
 * @param string $questionName Question name
 * @return array
 */
function qreset($questionName)
{
    return confModule::qreset($questionName);
}

/**
 * Stores the specified title in the associated FrontEnds title field
 *
 * @param string $title Title
 * @return array
 */
function title($title)
{
    return ConfModule::title($title);
}

/**
 * Creates an Element to stand for the question that is to be asked and adds it to the list of elements in our
 * associated FrontEnd.
 *
 * @param string $priority Priority
 * @param string $questionName Question name
 * @return array
 */
function input($priority, $questionName)
{
    return ConfModule::input($priority, $questionName);
}

/**
 * This is just stub method
 *
 * @return int
 */
function beginBlock()
{
    return ConfModule::beginBlock();
}

/**
 * This is just stub method
 *
 * @return int
 */
function endBlock()
{
    return ConfModule::endBlock();
}

/**
 * Display items to the user
 *
 * Tells the associated FrontEnd to display items to the user, by calling its go method. That method should return FALSE
 * if the user asked to back up, and TRUE otherwise. If it returns true, then all of the questions that were displayed
 * are added to the seen array
 *
 * @return array
 */
function go()
{
    return ConfModule::go();
}

/**
 * This must be passed a question name and a value. It sets the question's value
 *
 * @param string $questionName Question name
 * @param string $value Value
 * @return array
 */
function set($questionName, $value)
{
    return ConfModule::set($questionName, $value);
}

/**
 * Returns the value set in the given question
 *
 * This must be passed a question name. It queries the question for the value set in it and returns that to the
 * confmodule
 *
 * @param string $questionName Question name
 * @return array
 */
function get($questionName)
{
    return ConfModule::get($questionName);
}

/**
 * This must be passed a question name, a key, and a value. It sets up variable substitutions on the questions
 * description so all instances of the key (wrapped in "${}") are replaced with the value
 *
 * @param string $questionName Question name
 * @param string $key Key
 * @param string $value Value
 * @return array
 */
function subst($questionName, $key, $value)
{
    return ConfModule::subst($questionName, $key, $value);
}

/**
 * This should be passed a template name and a question name. Registers a question to use the template
 *
 * @param string $templateName Template name
 * @param string $questionName Question name
 * @return array
 */
function register($templateName, $questionName)
{
    return ConfModule::register($templateName, $questionName);
}

/**
 * Pass this a question name, and it will give up ownership of the question, which typically causes it to be
 * removed
 *
 * @param string $questionName Question name
 * @return array
 */
function unregister($questionName)
{
    return ConfModule::unregister($questionName);
}

/**
 * Clears out the list of elements in our accociated FrontEnd
 *
 * @return array
 */
function clear()
{
    return ConfModule::clear();
}

/**
 * Pass this a question name, a flag name, and a value. It sets the value of the specified flag in the specified
 * question
 *
 * @param string $questionName Question name
 * @param string $flagName Flag name
 * @param string $value Value
 * @return array
 */
function fset($questionName, $flagName, $value)
{
    return ConfModule::fset($questionName, $flagName, $value);
}

/**
 * Pass this a question name and a flag name. It returns the value of the specified flag on the question
 *
 * @param string $questionName Question name
 * @param string $flagName Flag name
 * @return array
 */
function fget($questionName, $flagName)
{
    return ConfModule::fget($questionName, $flagName);
}

/**
 * This will give up ownership of all questions a confmodule owns
 *
 * @return array
 */
function purge()
{
    return ConfModule::purge();
}

/**
 * Returns value of the given field for the given qusestion
 *
 * Pass this a question name and a field name. It returns the value of the specified field of the question.
 *
 * @param string $questionName Question name
 * @param string $fieldName Field name
 * @return array
 */
function metaget($questionName, $fieldName)
{
    return ConfModule::metaget($questionName, $fieldName);
}

/**
 * Uses the short description of a question as the title, with automatic i18n
 *
 * @param string $questionName Question name
 * @return array
 */
function setTitle($questionName)
{
    return ConfModule::setTitle($questionName);
}

/**
 * Pass this a question name. It displays the given template as an out-of-band informative message. Unlike inputting
 * a note, this doesn't require an acknowledgement from the user, and depending on the frontend it may not even be
 * displayed at all. Frontends should display the info persistently until some other info comes along.
 *
 * With no arguments, this resets the info message to a default value.
 *
 * @param string $questionName Question name
 * @return array
 */
function info($questionName)
{
    return ConfModule::info($questionName);
}

/**
 * Progress bar handling
 *
 * Pass this a subcommand name followed by any arguments required by the subcommand, as follows:
 *
 * START
 *  Pass this a minimum value, a maximum value, and a question name. It creates a progress bar with the specified
 *  range and the description of the specified question as the title.
 * SET
 *  Pass this a value. It sets the current position of the progress bar to the specified value.
 * STEP
 *  Pass this an increment. It increments the current position of the progress bar by the specified amount.
 * INFO
 *  Pass this a template name. It displays the specified template as an informational message in the progress bar.
 * STOP
 *  This subcommand takes no arguments. It destroys the progress bar.
 *
 * Note that the frontend's progressSet, progressStep, and progressInfo  functions should return true, unless
 * the progress bar was canceled.
 *
 * @internal string $subcommand Subcommand name
 * @internal mixed $argv Argument(s)
 * @return array
 */
function progress()
{
    return call_user_func_array('iHMS\Sysconf\Client\ConfModule::progress', func_get_args());
}

/**
 * Accept template data from the client, for use on the UI agent side of the passthrough frontend.
 *
 * @param string $template Template
 * @param string $item Item
 * @param string $value Value
 * @return array
 */
function data($template, $item, $value)
{
    return ConfModule::data($template, $item, $value);
}

/**
 * Load the given template file
 *
 * @param string $file File to load
 * @param string $owner OPTIONAL Owner
 * @return array
 */
function xLoadTemplateFile($file, $owner = null)
{
    return ConfModule::xloadTemplateFile($file, $owner);
}
