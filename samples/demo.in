#!/usr/bin/env php
<?php
/**
 * Sysconf - Interactive configuration system for PHP applications
 * Copyright (C) 2012 by iHMS Team
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * @category    iHMS
 * @package     iHMS_Sysconf
 * @subpackage  samples
 * @copyright   2012 by iHMS Team
 * @author      Laurent Declercq <l.declercq@nuxwin.com>
 * @version     0.0.1
 * @link        https://github.com/i-HMS/sysconf Sysconf Home Site
 * @license     http://www.gnu.org/licenses/gpl-2.0.html GPL v2
 */

/***********************************************************************************************************************
 * DESCRIPTION
 *
 *  Demo config module. This is more a regression/stress test.
 */

# Note this stanza is only here to make this script work in an uninstalled
# sysconf source tree, and is not needed in production code.
chdir(dirname(__DIR__));
if(file_exists('confmodule')) {
    require_once 'confmodule';
} else {
    require_once '@prefix@/share/ihms/sysconf/confmodule';
}

version('1.0');
capb('backup');
capb('escape');

settitle('demo/title');

// This implements a simple state machine so the back (cancel) button can be handled (backup capability)

$state = 1;
while ($state != 0 && $state != 10) {
    switch ($state) {
        case 1:
            input('high', 'demo/boolean');
            break;
        case 2:
            input('high', 'demo/multiselect');
            break;
        case 3:
            info('demo/info');
            input('critical', 'demo/string');
            input('low', 'demo/password');
            input('low', 'demo/text');
            subst('demo/select', 'colors', 'red, Yellow, green');
            input('high', 'demo/select');
            break;
        case 4:
            beginBlock();
            input('low', 'demo/boolean');
            input('low', 'demo/boolean');
            endBlock();
            input('low', 'demo/note');
            break;
        case 5:
            // Will be displayed again
            input('high', 'demo/password');
            break;
        case 6:
            progress('START', 0, 10, 'demo/progress/title');
            sleep(1);
            progress('SET', 2);
            sleep(1);
            progress('INFO', 'demo/progress/info');
            progress('STEP', 3);
            sleep(1);
            progress('STEP', 1);
            sleep(1);
            progress('STOP');
            break;
        case 7:
            subst('demo/subst', 'user', 'joe user\nanother user');
            $ret = metaget('demo/subst', 'extended_description');
            fwrite(STDERR, "demo/subst extended_description: {$ret[1]}\n");
            input('high', 'demo/subst');
            break;
        case 8:
            // This question should be show regardless of priority
            input('high', 'demo/error');
            break;
        case 9:
            // This question should be show regardless of priority
            input('low', 'demo/error');
            break;
    }

    $ret = go();
    ($ret[0] == 30) ? $state-- : $state++;
}

$ret = get('demo/select');
fwrite(STDERR, "Value for demo/select is: '{$ret[1]}'\n");

$ret = get('demo/string');
fwrite(STDERR, "Value for demo/string is: '{$ret[1]}'\n");

$ret = get('demo/boolean');
fwrite(STDERR, "Value for demo/boolean is: '{$ret[1]}'\n");

$ret = get('demo/multiselect');
fwrite(STDERR, "Value for demo/multiselect is: '{$ret[1]}'\n");

// Tell sysconf we're done talking to it.
// Note: Just for testing purpose since sysconf can detect termination of this program automatically
stop();
